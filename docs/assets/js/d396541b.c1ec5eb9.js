"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[343],{1846:(o,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var n=e(4848),i=e(8453);const s={sidebar_position:1},r="Otoroshi universal mesh sidecar",a={id:"sidecar/index",title:"Otoroshi universal mesh sidecar",description:"This page is still being written. Please be patient :)",source:"@site/docs/sidecar/index.md",sourceDirName:"sidecar",slug:"/sidecar/",permalink:"/otoroshictl/docs/sidecar/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Mesh sidecar",permalink:"/otoroshictl/docs/category/mesh-sidecar"},next:{title:"Remote tunnels",permalink:"/otoroshictl/docs/category/remote-tunnels"}},c={},l=[];function h(o){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,i.R)(),...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"otoroshi-universal-mesh-sidecar",children:"Otoroshi universal mesh sidecar"}),"\n",(0,n.jsx)(t.p,{children:"This page is still being written. Please be patient :)"}),"\n",(0,n.jsx)(t.p,{children:"otoroshictl sidecar allow to create a service mesh that can work inside and/or outside a kubernetes cluster"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"$ otoroshictl sidecar -h\n\nManage an otoroshi mesh sidecar\n\nUsage: otoroshictl sidecar [OPTIONS] <COMMAND>\n\nCommands:\n  howto            Display instructions to install/run the sidecar\n  run              Run otoroshi sidecar\n  generate-config\n  install          Install transparent proxing of the mesh calls through iptables rules\n  uninstall        Uninstall transparent proxing of the mesh calls through iptables rules\n  help             Print this message or the help of the given subcommand(s)\n\nOptions:\n  -v, --verbose\n          Turn debugging information on\n  -o, --ouput <FORMAT>\n          Change the rendering format (can be one of: json, yaml, json_pretty)\n  -c, --config-file <FILE or URL>\n          Sets a custom config file\n      --otoroshi-cluster-tls\n          Sets the tls flag to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-hostname <HOSTNAME>\n          Sets the hostname to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-port <PORT>\n          Sets the port to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-routing-tls\n          Sets the tls flag to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-routing-hostname <HOSTNAME>\n          Sets the hostname to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-routing-port <PORT>\n          Sets the port to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-user-client-id <CLIENT_ID>\n          Sets the client_id to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-user-client-secret <CLIENT_SECRET>\n          Sets the client_secret to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-user-health-key <HEALTH_KEY>\n          Sets the health_key to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-cert-location <FILE>\n          Sets the client cert location to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-key-location <FILE>\n          Sets the client cert key location to connect to a custom otoroshi cluster without using a config file\n      --otoroshi-cluster-ca-location <FILE>\n          Sets the client cert ca location to connect to a custom otoroshi cluster without using a config file\n  -h, --help\n          Print help\n"})}),"\n",(0,n.jsx)(t.p,{children:"the config. file format is the following"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"apiVersion: proxy.otoroshi.io/v1\nkind: Sidecar\nmetadata:\n  name: my-sidecar\nspec:\n  # optional\n  kubernetes: false\n  # catch DNS request to route *.otoroshi.mesh to otoroshi, can be disabled in kubernetes if coredns is configured\n  dns_integration: true\n  # optional the mesh domain to catch\n  dns_domain: .otoroshi.mesh\n  # how to talk to the local otoroshi cluster\n  otoroshi:\n    # location can be omitted in kubernetes\n    location:\n      hostname: otoroshi-api.oto.tools\n      kubernetes:\n        service: otoroshi-service\n        namespace: otoroshi\n      port: 9999\n      tls: false\n    # location can be omitted in kubernetes\n    routing_location:\n      hostname: routing.oto.tools\n      kubernetes:\n        service: otoroshi-service\n        namespace: otoroshi\n      port: 9998\n      tls: true\n    credentials:\n      # we must support file path here or ENV.name\n      client_id: admin-api-apikey-id\n      client_secret: admin-api-apikey-secret\n    client_cert:\n      # optional\n      cert_location: /tmp/cert.pem\n      # optional\n      cert_value: |\n        ---- BEGIN CERTIFICATE -----\n        xxxxxxxxxxxxxxxxxxx\n        ---- END CERTIFICATE ----\n      # optional\n      key_location: /tmp/cert.pem\n      # optional\n      key_value: |\n        ---- BEGIN PRIVATE KEY -----\n        xxxxxxxxxxxxxxxxxxx\n        ---- END PRIVATE KEY ----\n  # how we expose the local app\n  inbound:\n    port: 15000\n    # optional\n    target_port: 3000\n    # optional\n    target_hostname: api-a.foo.bar\n    tls: \n      enabled: true\n      # optional otoroshi certificate id\n      cert_id: jEVeLxI2eeAfyeFcZ0pRIN5EOqp8bYxWqVw43e7r3CQtUM6hl8VmsJiOJOPYpXiv\n    mtls:\n      enabled: true\n      # optional otoroshi ca certificate id\n      ca_cert_id: otoroshi-intermediate-ca\n    otoroshi_protocol:\n      enabled: true\n      # optional otoroshi route id to get config if symmetrical\n      route_id: xxxx\n      # optional\n      secret: xxxxx\n      # optional\n      algo: HS256\n      # optional\n      version: V2\n      # optional\n      header_in_name: xxxx\n      # optional\n      header_out_name: xxxx\n  # what we want to call from the local app and how\n  outbounds:\n    # optional internal proxy port\n    port: 15001\n    sidecar-outbound.otoroshi.mesh:\n      # can be omitted if same as key\n      hostname: sidecar-outbound.otoroshi.mesh\n      # optional\n      path: /api/.*\n      apikey: \n        enabled: true\n        # optional otoroshi apikey entity id\n        apikey_id: apki_oDJ0IJT4ReBnhOlP\n      mtls: \n        enabled: true\n        # optional otoroshi certificate id\n        client_cert_id: otoroshi-client\n    service-b.otoroshi.mesh:\n      # can be omitted if same as key\n      hostname: service-b.otoroshi.mesh\n      # optional\n      path: /.*\n      apikey: \n        enabled: true\n        # optional otoroshi apikey entity id\n        apikey_id: apki_oDJ0IJT4ReBnhOlP\n        enabled: true\n        # optional otoroshi certificate id\n        client_cert_id: otoroshi-client\n"})})]})}function u(o={}){const{wrapper:t}={...(0,i.R)(),...o.components};return t?(0,n.jsx)(t,{...o,children:(0,n.jsx)(h,{...o})}):h(o)}},8453:(o,t,e)=>{e.d(t,{R:()=>r,x:()=>a});var n=e(6540);const i={},s=n.createContext(i);function r(o){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof o?o(t):{...t,...o}}),[t,o])}function a(o){let t;return t=o.disableParentContext?"function"==typeof o.components?o.components(i):o.components||i:r(o.components),n.createElement(s.Provider,{value:t},o.children)}}}]);