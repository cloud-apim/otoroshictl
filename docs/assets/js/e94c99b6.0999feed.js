"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[304],{4169:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var n=t(4848),s=t(8453),r=t(9229);const l={sidebar_position:6},i="Remote tunnels client",a={id:"remotetunnels",title:"Remote tunnels client",description:"otoroshictl is capable of talking with the otoroshi remote tunnel protocol as described here in the official otoroshi documentation.",source:"@site/docs/remotetunnels.mdx",sourceDirName:".",slug:"/remotetunnels",permalink:"/otoroshictl/docs/remotetunnels",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Outside of a kubernetes cluster",permalink:"/otoroshictl/docs/sidecar/outside"},next:{title:"Cloud APIM integration",permalink:"/otoroshictl/docs/category/cloud-apim-integration"}},c={},d=[{value:"Make a local service available through remote tunnel",id:"make-a-local-service-available-through-remote-tunnel",level:2},{value:"Expose a local service available through remote tunnel",id:"expose-a-local-service-available-through-remote-tunnel",level:2},{value:"Command usage",id:"command-usage",level:2}];function h(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"remote-tunnels-client",children:"Remote tunnels client"}),"\n",(0,n.jsxs)(o.p,{children:[(0,n.jsx)(o.code,{children:"otoroshictl"})," is capable of talking with the otoroshi remote tunnel protocol as described ",(0,n.jsx)(o.a,{href:"https://maif.github.io/otoroshi/manual/topics/tunnels.html",children:"here in the official otoroshi documentation"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["The idea here is to create a bidirectionnal tunnel between ",(0,n.jsx)(o.code,{children:"otoroshictl"})," and an otoroshi instance in order to make this otoroshi instance capable of exposing service only accessible to ",(0,n.jsx)(o.code,{children:"otoroshictl"}),"."]}),"\n",(0,n.jsx)(o.h2,{id:"make-a-local-service-available-through-remote-tunnel",children:"Make a local service available through remote tunnel"}),"\n",(0,n.jsxs)(o.p,{children:["here we are going to make the process listening on port 3000 on localhost available to the current otoroshi cluster. This process will be available through tunnel ",(0,n.jsx)(o.code,{children:"process1"})]}),"\n",(0,n.jsx)(r.A,{command:"otoroshictl remote-tunnel --local-port 3000 --tunnel process1"}),"\n",(0,n.jsx)(o.p,{children:"we can also make distance services available as well"}),"\n",(0,n.jsx)(r.A,{command:"otoroshictl remote-tunnel --local-port 3000 --local-host 192.168.1.42 --tunnel process1"}),"\n",(0,n.jsx)(o.h2,{id:"expose-a-local-service-available-through-remote-tunnel",children:"Expose a local service available through remote tunnel"}),"\n",(0,n.jsxs)(o.p,{children:["here we are going to make the process listening on port 3000 on localhost available to the current otoroshi cluster and automatically expose it through a route. This process will be available through tunnel ",(0,n.jsx)(o.code,{children:"process1"}),"."]}),"\n",(0,n.jsx)(r.A,{command:"otoroshictl remote-tunnel --local-port 3000 --tunnel process1 --expose",result:"\n\n[INFO  otoroshictl::tunnels::remote]\n[INFO  otoroshictl::tunnels::remote] your service will be available at: http://967cdd29-ddd9-4d0a-a894-3b24e50f64c7-tunnel.oto.tools:8080\n[INFO  otoroshictl::tunnels::remote]\n[INFO  otoroshictl::tunnels::remote] connecting the tunnel ...\n[INFO  otoroshictl::tunnels::remote] connection done !\n"}),"\n",(0,n.jsx)(o.p,{children:"we can also explicitely pass the exposed domain with"}),"\n",(0,n.jsx)(r.A,{command:"otoroshictl remote-tunnel --local-port 3000 --tunnel process1 --expose --remote-domain foo.bar --remote-subdomain process1"}),"\n",(0,n.jsxs)(o.p,{children:["and you'll be able to access your process at ",(0,n.jsx)(o.code,{children:"http://process1.foo.bar"})]}),"\n",(0,n.jsx)(o.h2,{id:"command-usage",children:"Command usage"}),"\n",(0,n.jsx)(r.A,{command:"otoroshictl remote-tunnel -h",result:"\n\nExposes local processes on the current otoroshi cluster through the otoroshi remote tunnel feature\n\nUsage: otoroshictl remote-tunnel [OPTIONS]\n\nOptions:\n      --local-host <LOCAL_HOST>\n          the local host forwarded to [default: localhost]\n      --local-port <LOCAL_PORT>\n          the local port forwarded to [default: 8080]\n      --local-tls\n          local process exposed as tls ?\n      --expose\n          enable expose mode\n      --remote-domain <REMOTE_DOMAIN>\n          the exposed domain\n      --remote-subdomain <REMOTE_SUBDOMAIN>\n          the exposed subdomain\n      --tls\n          enable tls want mode\n      --tunnel <TUNNEL>\n          the tunnel id [default: cli]\n  ...\n"})]})}function u(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},9229:(e,o,t)=>{t.d(o,{A:()=>r});var n=t(6540),s=t(4848);class r extends n.Component{state={copy:!1};copy=()=>{this.setState({copy:!0},(()=>{navigator.clipboard.writeText(this.props.command),setTimeout((()=>{this.setState({copy:!1})}),1e3)}))};render(){const e=this.state.copy?"rgb(40, 167, 69)":"white";let o=(this.props.command||"").trim();return o.startsWith("\n")&&(o=o.substring(1)),o.startsWith("$ ")&&(o=o.substring(2)),(0,s.jsx)("div",{className:"terminal-component",style:{width:"100%",marginTop:20},children:(0,s.jsxs)("div",{style:{maxWidth:"100%",display:"flex",flexDirection:"column",borderRadius:5},children:[(0,s.jsxs)("div",{style:{borderTopLeftRadius:5,borderTopRightRadius:5,height:"2rem",gap:".35rem",display:"flex",flexDirection:"row",justifyContent:"center",alignItems:"center",background:"#3f52e3",color:"white"},children:[(0,s.jsx)("div",{style:{marginLeft:".35rem",width:10,height:10,borderRadius:"50%",backgroundColor:"#ccc"}}),(0,s.jsx)("div",{style:{width:10,height:10,borderRadius:"50%",backgroundColor:"#ccc"}}),(0,s.jsx)("div",{style:{width:10,height:10,borderRadius:"50%",backgroundColor:"#ccc"}}),(0,s.jsx)("span",{style:{width:"100%"}}),(0,s.jsx)("div",{style:{cursor:"pointer",width:30,height:30},onClick:this.copy,children:(0,s.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24","stroke-width":"1.5",stroke:e,className:"w-5 h-5",children:(0,s.jsx)("path",{"stroke-linecap":"round","stroke-linejoin":"round",d:"M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184"})})})]}),(0,s.jsxs)("pre",{style:{display:"block",overflowX:"auto",background:"#002451",color:"white",padding:"1rem 12px 1rem",borderTopLeftRadius:0,borderTopRightRadius:0,borderBottomRightRadius:5,borderBottomLeftRadius:5},children:[(0,s.jsx)("code",{className:"language-bash",style:{whiteSpace:"pre"},children:(0,s.jsxs)("span",{children:["$ ",o]})}),this.props.result&&(0,s.jsx)("code",{className:"language-bash",style:{whiteSpace:"pre"},children:(0,s.jsx)("span",{children:this.props.result})})]})]})})}}},8453:(e,o,t)=>{t.d(o,{R:()=>l,x:()=>i});var n=t(6540);const s={},r=n.createContext(s);function l(e){const o=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(r.Provider,{value:o},e.children)}}}]);